/**
 * Created by hug.
 */
public class ExperimentHelper{

    /** Returns the internal path length for an optimum binary search tree of
     *  size N. Examples:
     *  N = 1, OIPL: 0
     *  N = 2, OIPL: 1
     *  N = 3, OIPL: 2
     *  N = 4, OIPL: 4
     *  N = 5, OIPL: 6
     *  N = 6, OIPL: 8
     *  N = 7, OIPL: 10
     *  N = 8, OIPL: 13
     */

//     avgdepth = sum(depth * nodes number at corresponding depth) / sum(nodes number)
//     optimalIPL = avgdepth * sum(nodes number)
//     => optimalIPL = sum(depth * nodes number at corresponding depth)
    public static int optimalIPL(int N) {
        int res = 0;
        int cnt = 0;
        int temp = N;
        while (temp != 1){
            cnt++;
            temp /= 2;
        }
        for(int i=0; i < cnt; i++){
            res += (int)Math.pow(2,i) * i;
        }
        res += (N - (int)Math.pow(2,cnt) +1) *cnt;
        return res;
    }





    /** Returns the average depth for nodes in an optimal BST of
     *  size N.
     *  Examples:
     *  N = 1, OAD: 0
     *  N = 5, OAD: 1.2
     *  N = 8, OAD: 1.625
     * @return
     */
    public static double optimalAverageDepth(int N) {
        double avg = 0.0;
        int length = optimalIPL(N);
        avg = length / N;
        return avg;
    }

// insert the randomInt into BST generated by RandomGenerator
    public static void getInt(BST<Integer> T){
        int temp = RandomGenerator.getRandomInt(10000);
        while(true){
            if(!T.contains(temp)){
                T.add(temp);
                break;
            }else{
                temp = RandomGenerator.getRandomInt(10000);
            }
        }
    }
}
